name: AIShell-Build-$(Build.BuildId)
trigger: none

parameters:
  - name: SKIP_SIGNING
    displayName: Skip Signing
    type: string
    default: 'NO'

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance
    ref: master
  - repository: onebranchTemplates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

variables:
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 1
  - name: POWERSHELL_TELEMETRY_OPTOUT
    value: 1
  - name: nugetMultiFeedWarnLevel
    value: none
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - name: skipNugetSecurityAnalysis
    value: true
  - name: branchCounterKey
    value: $[format('{0:yyyyMMdd}-{1}', pipeline.startTime,variables['Build.SourceBranch'])]
  - name: branchCounter
    value: $[counter(variables['branchCounterKey'], 1)]
  - name: BUILDSECMON_OPT_IN
    value: true
  - name: LinuxContainerImage
    value: onebranch.azurecr.io/linux/ubuntu-2004:latest
  - name: WindowsContainerImage
    value: onebranch.azurecr.io/windows/ltsc2019/vse2022:latest
  - name: CDP_DEFINITION_BUILD_COUNT
    value: $[counter('', 0)]
  - name: SKIP_SIGNING
    value: ${{ parameters.SKIP_SIGNING }}
  - group: mscodehub-feed-read-general
  - group: mscodehub-feed-read-akv

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@onebranchTemplates
  parameters:
    customTags: 'ES365AIMigrationTooling'
    featureFlags:
      LinuxHostVersion:
          Network: KS3
      WindowsHostVersion:
          Network: KS3
    globalSdl:
      disableLegacyManifest: true
      # disabled Armorty as we dont have any ARM templates to scan. It fails on some sample ARM templates.
      armory:
        enabled: false
      sbom:
        enabled: true
        buildComponentPath: $(Build.SourcesDirectory)\ProjectMercury\shell
      codeql:
        compiled:
          enabled: true
      cg:
        enabled: true
        ignoreDirectories: 'docs,test,tools'
      asyncSdl:
        enabled: true
        forStages: [prep, macos, linux, windows]
        credscan:
          enabled: true
          scanFolder: $(Build.SourcesDirectory)
        binskim:
          enabled: false
        apiscan:
          enabled: false
        tsaOptionsFile: .config\tsaoptions.json

    stages:
    - stage: macos
      displayName: macOS - build and sign
      jobs:
      - template: /.pipelines/templates/mac.yml@self
        parameters:
          Architecture: x64
      - template: /.pipelines/templates/mac.yml@self
        parameters:
          Architecture: arm64

    - stage: linux
      displayName: linux - build and sign
      jobs:
      - template: /.pipelines/templates/linux.yml@self
        parameters:
          Architecture: x64
      - template: /.pipelines/templates/linux.yml@self
        parameters:
          Architecture: arm64

    - stage: windows
      displayName: windows - build and sign
      jobs:
      - template: /.pipelines/templates/windows.yml@self
        parameters:
          Architecture: x64
      - template: /.pipelines/templates/windows.yml@self
        parameters:
          Architecture: arm64

    - stage: module
      displayName: module - build and sign
      jobs:
      - job: build
        displayName: Build AIShell module
        condition: succeeded()
        pool:
          type: linux
        variables:
        - name: runCodesignValidationInjection
          value: false
        - name: NugetSecurityAnalysisWarningLevel
          value: none
        - name: DOTNET_NOLOGO
          value: 1
        - group: DotNetPrivateBuildAccess
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        - name: repoRoot
          value: $(Build.SourcesDirectory)\ProjectMercury
        - name: ob_sdl_sbom_enabled
          value: false
        - name: ob_sdl_codeSignValidation_enabled
          value: false
        - name: ob_sdl_binskim_enabled
          value: true
        - name: ob_sdl_tsa_configFile
          value: $(repoRoot)\.config\tsaoptions.json
        #CodeQL tasks added manually to workaround signing failures
        - name: ob_sdl_codeql_compiled_enabled
          value: false

        steps:
        - checkout: self
          clean: true
          env:
            ob_restore_phase: true

        - pwsh: |
            Get-ChildItem Env:
          displayName: Capture environment variables
          env:
            ob_restore_phase: true

        - template: /.pipelines/templates/update-nuget-config.yml@self
          parameters:
            repoRoot: $(repoRoot)

        # Add CodeQL Init task right before your 'Build' step.
        - task: CodeQL3000Init@0
          env:
            ob_restore_phase: true
          inputs:
            Enabled: true
            Language: csharp

        - pwsh: |
            Import-Module $(repoRoot)/build.psm1 -Force
            Install-Dotnet

            $runtime = 'linux-x64'
            Write-Verbose "Building with Runtime: $runtime" -Verbose
            Start-Build -Runtime $runtime -Configuration Release -Clean -Verbose

            $outputJson = '$(repoRoot)/_build_output_.json'
            if (Test-Path $outputJson) {
              $result = Get-Content $outputJson | ConvertFrom-Json
              Write-Verbose "Module path: $($result.Module)" -Verbose

              $vstsCommandString = "vso[task.setvariable variable=ModuleDir]$($result.Module)"
              Write-Host ("sending " + $vstsCommandString)
              Write-Host "##$vstsCommandString"
            }
          displayName: 'Build AIShell module'
          env:
            ob_restore_phase: true

        # Add CodeQL Finalize task right after your 'Build' step.
        - task: CodeQL3000Finalize@0
          env:
            ob_restore_phase: true

        - pwsh: |
            Get-ChildItem $(ModuleDir) -Recurse
          displayName: "List AIShell module files"
          env:
            ob_restore_phase: true

        - task: CopyFiles@2
          displayName: "Upload unsigned module files"
          env:
            ob_restore_phase: true
          inputs:
            SourceFolder: $(ModuleDir)
            Contents: '**/*'
            TargetFolder: $(ob_outputDirectory)

        - template: /.pipelines/templates/finalize.yml@self

      - job: sign
        displayName: Sign AIShell module
        condition: succeeded()
        dependsOn: build
        pool:
          type: windows
        variables:
        - name: runCodesignValidationInjection
          value: false
        - name: NugetSecurityAnalysisWarningLevel
          value: none
        - name: DOTNET_NOLOGO
          value: 1
        - group: DotNetPrivateBuildAccess
        - group: certificate_logical_to_actual
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        - name: repoRoot
          value: $(Build.SourcesDirectory)\ProjectMercury
        - name: ob_sdl_codeSignValidation_enabled
          value: false
        - name: ob_sdl_binskim_enabled
          value: false
        - name: ob_sdl_tsa_configFile
          value: $(repoRoot)\.config\tsaoptions.json
        - name: ob_sdl_codeql_compiled_enabled
          value: false
        - name: ob_sdl_sbom_packageName
          value: 'AIShell.Module'

        steps:
        - checkout: self
          clean: true
          env:
            ob_restore_phase: true

        - pwsh: |
            Get-ChildItem Env:
          displayName: Capture environment variables
          env:
            ob_restore_phase: true

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: drop_module_build
            path: $(Pipeline.Workspace)/drop_module_build
          displayName: Download build

        - pwsh: |
            Get-ChildItem -Path $(Pipeline.Workspace)/drop_module_build -Recurse
          displayName: 'List downloaded files'

        - template: /.pipelines/templates/sign-files.yml@self
          parameters:
            appPath: '$(Pipeline.Workspace)/drop_module_build'
            repoRoot: '$(repoRoot)'

        - template: /.pipelines/templates/finalize.yml@self
