parameters:
  Architecture: 'x64'

jobs:
- job: build_${{ parameters.Architecture }}
  displayName: Build macOS ${{ parameters.Architecture }}
  condition: succeeded()
  pool:
    type: linux
    isCustom: true
    name: Azure Pipelines
    vmImage: 'macOS-latest'

  variables:
  - name: HOMEBREW_NO_ANALYTICS
    value: 1
  - name: DOTNET_NOLOGO
    value: 1
  - name: runCodesignValidationInjection
    value: false
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - group: DotNetPrivateBuildAccess
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: repoRoot
    value: $(Build.SourcesDirectory)
  - name: Architecture
    value: ${{ parameters.Architecture }}
  - name: Runtime
    value: 'osx-$(Architecture)'

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true

  - pwsh: |
      Get-ChildItem Env:
    displayName: Capture environment variables
    env:
      ob_restore_phase: true

  - template: /.pipelines/templates/update-nuget-config.yml@self
    parameters:
      repoRoot: $(repoRoot)

  - pwsh: |
      Import-Module $(repoRoot)/build.psm1 -Force
      Install-Dotnet

      $runtime = '$(Runtime)'
      Write-Verbose "Building with Runtime: $runtime" -Verbose
      Start-Build -Runtime $runtime -Configuration Release -Clean -Verbose

      $outputJson = '$(repoRoot)/_build_output_.json'
      if (Test-Path $outputJson) {
        $result = Get-Content $outputJson | ConvertFrom-Json
        Write-Verbose "App path: $($result.App)" -Verbose
        Write-Verbose "Module path: $($result.Module)" -Verbose

        $artifactName = 'macBuild-$(Architecture)'
        $appArtifact = "$artifactName-app"
        $moduleArtifact = "$artifactName-module"

        # Since we are using custom pool for macOS, we need to use artifact.upload to publish the artifacts
        Write-Host "##vso[artifact.upload containerfolder=$appArtifact;artifactname=$appArtifact]$($result.App)"
        Write-Host "##vso[artifact.upload containerfolder=$moduleArtifact;artifactname=$moduleArtifact]$($result.Module)"
      }
    displayName: 'Build macOS'

  - template: /.pipelines/templates/finalize.yml@self

- job: sign_${{ parameters.Architecture }}
  displayName: Sign_macOS_${{ parameters.Architecture }}
  condition: succeeded()
  dependsOn: build_${{ parameters.Architecture }}
  pool:
    type: windows
  variables:
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - name: DOTNET_NOLOGO
    value: 1
  - group: DotNetPrivateBuildAccess
  - group: certificate_logical_to_actual
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: repoRoot
    value: $(Build.SourcesDirectory)\ProjectMercury
  - name: ob_sdl_codeSignValidation_enabled
    value: true
  - name: ob_sdl_tsa_configFile
    value: $(repoRoot)\.config\tsaoptions.json
  - name: Architecture
    value: ${{ parameters.Architecture }}
  - name: Runtime
    value: 'osx-$(Architecture)'
  - name: ob_sdl_codeql_compiled_enabled
    value: false
  - name: ob_sdl_sbom_packageName
    value: 'AIShell.MacOS.${{parameters.Architecture}}'

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true

  - pwsh: |
      Get-ChildItem Env:
    displayName: Capture environment variables
    env:
      ob_restore_phase: true

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'macBuild-$(Architecture)-app'
      path: '$(Pipeline.Workspace)\macApp'
    displayName: Download app build

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'macBuild-$(Architecture)-module'
      path: '$(Pipeline.Workspace)\macModule'
    displayName: Download module build

  - pwsh: |
        Get-ChildItem "$(Pipeline.Workspace)\*" -Recurse
    displayName: 'List Downloaded Artifacts'
    # Diagnostics is not critical it passes every time it runs
    continueOnError: true

  - template: /.pipelines/templates/sign-files.yml@self
    parameters:
      appPath: '$(Pipeline.Workspace)\macApp'
      modulePath: '$(Pipeline.Workspace)\macModule'
      repoRoot: '$(repoRoot)'

  - template: /.pipelines/templates/finalize.yml@self
