jobs:
- job: upload_packages
  displayName: Upload packages
  condition: succeeded()
  pool:
    type: windows
  variables:
  - group: Azure Blob variable group
  - name: runCodesignValidationInjection
    value: false
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: repoRoot
    value: $(Build.SourcesDirectory)\ProjectMercury
  - name: ob_sdl_codeSignValidation_enabled
    value: false
  - name: ob_sdl_binskim_enabled
    value: false
  - name: ob_sdl_tsa_configFile
    value: $(repoRoot)\.config\tsaoptions.json
  - name: ob_sdl_codeql_compiled_enabled
    value: false

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true

  - pwsh: |
      Get-ChildItem Env:
    displayName: 'Capture Environment Variables'

  - pwsh: |
      New-Item -Path '$(Build.ArtifactStagingDirectory)/downloads' -ItemType Directory -Force
    displayName: Create downloads directory

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: macos-pkgs
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download macOS x64 packages

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: drop_linux_package_x64
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download Linux x64 packages

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: drop_linux_package_arm64
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download Linux arm64 packages

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: drop_windows_package_x86
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download Windows x86 packages

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: drop_windows_package_x64
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download Windows x64 packages

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: drop_windows_package_arm64
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download Windows arm64 packages

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: drop_module_package
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download module package

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifact: drop_nupkg_package
      targetPath: '$(Build.ArtifactStagingDirectory)/downloads'
    displayName: Download SDK NuGet package

  - pwsh: |
      Get-ChildItem '$(Build.ArtifactStagingDirectory)/downloads' | ForEach-Object FullName
    displayName: 'Capture downloads'

  - pwsh: |
      # Create output directory for packages which have been uploaded to blob storage
      New-Item -Path $(Build.ArtifactStagingDirectory)/uploaded -ItemType Directory -Force
    displayName: Create output directory for packages

  - pwsh: |
      $azureRmModule = Get-InstalledModule AzureRM -ErrorAction SilentlyContinue -Verbose
      if ($azureRmModule) {
        Write-Host 'AzureRM module exists. Removing it'
        Uninstall-AzureRm
        Write-Host 'AzureRM module removed'
      }

      Install-Module -Name Az.Storage -Force -AllowClobber -Scope CurrentUser -Verbose
    displayName: Remove AzRM modules

  - task: AzurePowerShell@5
    displayName: Upload packages to blob
    inputs:
      azureSubscription: az-blob-cicd-infra
      scriptType: inlineScript
      azurePowerShellVersion: LatestVersion
      pwsh: true
      inline: |
        $downloadsDirectory = '$(Build.ArtifactStagingDirectory)/downloads'
        $uploadedDirectory = '$(Build.ArtifactStagingDirectory)/uploaded'

        $nupkgFile = Get-ChildItem $downloadsDirectory -Filter AIShell.Abstraction.*.nupkg
        $nupkgName = [System.IO.Path]::GetFileNameWithoutExtension($nupkgFile.Name)
        $version = $nupkgName.Replace('AIShell.Abstraction.', '')

        $storageAccountName = '$(PSInfraStorageAccount)'
        $context = New-AzStorageContext -StorageAccountName $storageAccountName -UseConnectedAccount

        # Create the public blob container if it doesn't exist
        $publicContainer = '$web'
        $blobPrefix = "aish/${version}/"
        $containerExists = Get-AzStorageContainer -Name $publicContainer -Context $context -ErrorAction SilentlyContinue
        if (-not $containerExists) {
            $null = New-AzStorageContainer -Name $publicContainer -Context $context
            Write-Host "Blob container $publicContainer created successfully."
        }

        Write-Verbose -Verbose "Uploading packages to blob storage account: $storageAccountName container: $publicContainer"
        Get-ChildItem -Path $downloadsDirectory -Exclude *.nupkg, *.msix | ForEach-Object {
            $blobName = $blobPrefix + $_.Name
            Write-Verbose -Verbose "Uploading $($_.FullName) to $publicContainer/$blobName"
            $null = Set-AzStorageBlobContent -File $_.FullName -Container $publicContainer -Blob $blobName -Context $context

            # Move to folder so we won't upload again
            Move-Item -Path $_.FullName -Destination $uploadedDirectory -Force -Verbose
        }

        # Create the private blob container if it doesn't exist
        $privateContainer = 'aish'
        $blobPrefix = "${version}/"
        $containerExists = Get-AzStorageContainer -Name $privateContainer -Context $context -ErrorAction SilentlyContinue
        if (-not $containerExists) {
            $null = New-AzStorageContainer -Name $privateContainer -Context $context
            Write-Host "Blob container $privateContainer created successfully."
        }

        Write-Verbose -Verbose "Uploading packages to blob storage account: $storageAccountName container: $privateContainer"
        Get-ChildItem -Path $downloadsDirectory | ForEach-Object {
            $blobName = $blobPrefix + $_.Name
            Write-Verbose -Verbose "Uploading $($_.FullName) to $privateContainer/$blobName"
            $null = Set-AzStorageBlobContent -File $_.FullName -Container $privateContainer -Blob $blobName -Context $context

            # Move to folder so we won't upload again
            Move-Item -Path $_.FullName -Destination $uploadedDirectory -Force -Verbose
        }

        Write-Verbose -Verbose "Capture all uploaded files:"
        Get-ChildItem $uploadedDirectory | ForEach-Object FullName
